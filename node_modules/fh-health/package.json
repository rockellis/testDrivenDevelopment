{
  "name": "fh-health",
  "version": "0.0.6",
  "description": "A wrapper to add a health endpoint to your cloud application based on nodeapp.",
  "main": "./lib/TestRunner.js",
  "scripts": {
    "test": "grunt test"
  },
  "keywords": [
    "feedhenry",
    "fh",
    "fh-health",
    "health"
  ],
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/evanshortiss/fh-health.git"
  },
  "author": {
    "name": "Evan Shortiss"
  },
  "dependencies": {
    "async": "0.2.9",
    "winston": "^0.8.1"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-lintspaces": "^0.5.1",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-column-lint": "~0.2.0",
    "mocha": "~1.20.1",
    "grunt-mocha-istanbul": "~1.4.1"
  },
  "bugs": {
    "url": "https://github.com/evanshortiss/fh-health/issues"
  },
  "homepage": "https://github.com/evanshortiss/fh-health",
  "_id": "fh-health@0.0.6",
  "dist": {
    "shasum": "0cf4a99870cb8037237102b3dd183055c480daeb",
    "tarball": "http://registry.npmjs.org/fh-health/-/fh-health-0.0.6.tgz"
  },
  "_from": "fh-health@0.0.6",
  "_npmVersion": "1.3.21",
  "_npmUser": {
    "name": "evanshortiss",
    "email": "evanshortiss@gmail.com"
  },
  "maintainers": [
    {
      "name": "evanshortiss",
      "email": "evanshortiss@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "0cf4a99870cb8037237102b3dd183055c480daeb",
  "_resolved": "https://registry.npmjs.org/fh-health/-/fh-health-0.0.6.tgz",
  "readme": "#fh-health\n\n\nModule to add health checks to an application. This is a health check to verify the running application (connectivity, etc.) is ok, and not a replacemnt for actual testing. The health check returns a JSON response formatted as shown below (using a single whitespace between key and values):\n\n```\n{\n    \"status\": \"<ok|warn|crit>\",\n    \"summary\": \"<something-meaningful-about-the-status>\",\n    \"details\": []\n}\n```\n\nThe \"details\" Array contains objects describing the results of each test which are formatted like so.\n\n```\n{\n  \"description\": <The description provided to addTest or addCriticalTest function>,\n  \"test_status\": <ok|warn|crit>,\n  \"result\": <The result returned from your callback to either the err or result paramater>,\n  \"runtime\": <Time taken in milliseconds to run the test item>\n}\n```\n\n\n##Usage\nIf running within fh-nodeapp the module should be initialised from your main.js file as shown below. This will setup a new endpoint in your application called \"health\", so ensure none of your endpoints are called health to avoid conflicts. Alternatively you can just call *health.init()* and manage the endpoint yourself.\n\n```\n// With fh-nodeapp\nvar health = require('fh-health');\n// This will add a health endpoint automatically.\nhealth.init(module.exports);\n\n// Standard usage with an express app\nvar health = require('fh-health');\nhealth.init();\napp.get('/health', function(req, res) {\n  health.runTests(function(err, testResult) {\n    res.end(testResult);\n  });\n});\n```\n\n##Adding Tests\nAdding tests is done via two functions. *addTest(description, testFn)* and *addCriticalTest(description, testFn)*. The *testFn* function is a function that must have the format:\n\n```\nfunction testFn(callback) {\n  // ...Do some stuff...\n  // ...................\n  if(anErrorOccured) {\n    return callback('Oh crap!', null);\n  } else {\n    return callback(null, 'All good here!');\n  }\n}\n\nhealth.addCriticalTest('Test something important', testFn);\n```\n\n###Critical Tests - *addCriticalTest(name, fn)*\nAre those that result in the health endpoint returning a \"crit\" status if they pass a non null *err* argument (the first argument) to their callback. If a critical test has no issues then they have a status of \"ok\".\n\n### Standard Tests - *addTest(name, fn)*\nAdded via *addTest* are tests that can return an error to their callback without causing a \"crit\" status, but will instead cause a \"warn\" status.\n\n\n##Simple Example\n\n```\nvar request = require('request');\nvar health = require('fh-health');\nhealth.init(module.exports);\n\nhealth.addTest('Test http', function(callback){\n\tvar request = require('request');\n\trequest.get('http://www.google.com', function(err, res, body) {\n\t\tif (err) {\n\t\t\treturn callback('Error in request to google.com: ' + JSON.stringify(err));\n\t\t} else if (res && res.statusCode != 200) {\n\t\t\treturn callback('Google responded with status code of ' + res.statusCode);\n\t\t} else {\n      return callback(null, 'Successfully loaded google.com');\n    }\n\t});\n});\n```\n\nThis example if successful would return the following response:\n\n```\n{\n    status: 'ok',\n    summary: 'No issues to report. All tests passed without error',\n    details: [{\n        description: 'Test a request to www.google.com is successful',\n        test_status: 'ok',\n        result: 'Successfully loaded google.com',\n        runtime: 2106\n    }]\n}\n```\n\nIf this example encountered a status code that wasn't *200* the following would be returned:\n\n```\n{\n    status: 'warn',\n    summary: 'Some non-critical tests encountered issues. See the \"details\" object for specifics.',\n    details: [{\n        description: 'Test a request to www.google.com is successful',\n        test_status: 'warn',\n        result: 'Google responded with a status code of {CODE}',\n        runtime: 2341\n    }]\n}\n```\n\n##Timeouts\nThe default timeout for running tests is 25 seconds. After 25 seconds the test runner will ignore results returned from any unfinished tests.\n\nThe timeout can be modified like so:\n\n```\n// Set the max running time to 60 seconds\nvar health = require('fh-health');\nhealth.setMaxRuntime( (60*1000) );\n```\n\nIf a timeout occurs on a critical test then the overall status returned will be \"crit\". If a timeout occurs on a regular test then a status of \"warn\" will be returned.\n\n```\n{\n  \"status\": \"warn\",\n  \"summary\": \"Some non-critical tests encountered issues. See the \"details\" object for specifics.\",\n  \"details\": [\n    {\n      \"description\": \"Check connectivity to component XYZ.\",\n      \"test_status\": \"warn\",\n      \"result\": \"The test didn't complete before the alotted time frame.\",\n      \"runtime\": 25000\n    }\n  ]\n}\n```\n\n##Usage Pattern\nYou can include test cases in separate modules which is perfectly valid, or alternatively have all tests in a single file.\n\n####index.js\n```\nvar health = require('fh-health');\nhealth.init();\n\nvar app = express();\napp.get('/health', function(req, res) {\n  health.runTests(function(err, data) {\n    if(err) {\n      res.status(500).end('An error occured.');\n    } else {\n      res.json(data);\n    }\n  });\n});\n```\n\n####myOtherModule.js\n```\nvar health = require('fh-health');\n\nhealth.addTest('Test some functionality.', function(callback) {\n\t// Test code...\n});\nhealth.addCriticalTest('Test some critical functionality.', function(callback) {\n\t// Test code...\n});\n```\n\n####myOtherOtherModule.js\n```\nvar health = require('fh-health');\n\nhealth.addTest('Just another test...', function(callback) {\n  // Test code...\n});\n```\n",
  "readmeFilename": "README.md"
}
